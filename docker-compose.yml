version: '3.8'

services:
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: 'rabbitmq'
    ports:
        - 5672:5672
        - 15672:15672
    volumes:
        - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
        - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
    networks:
        - pg_network


  # PostgreSQL service
  db:
    image: postgres:latest
    container_name: postgres-container
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: onepieceonepiece
      POSTGRES_HOST_AUTH_METHOD: "trust"
      POSTGRES_DB: kassech
    ports:
      - 5433:5432/tcp   # Expose the PostgreSQL port to the host
    networks:
      - pg_network
    volumes:
      - postgres_data:/var/lib/postgresql/data  # Persist data
    healthcheck:
        test: ["CMD-SHELL", "pg_isready -U root -d kassech"]
        interval: 10s
        timeout: 5s
        retries: 5
  redis:
      image: redis:6.2
      container_name: redis-container
      ports:
        - "6380:6379"   # Expose the Redis port to the host
      networks:
       - pg_network
      volumes:
       - redis_data:/data  # Persist data
      healthcheck:
        test: ["CMD", "redis-cli", "ping"]
        interval: 10s
        timeout: 5s
        retries: 5
  # Kassech backend service
  kassech-backend:
    build:
      context: ./Backend/
      dockerfile: Dockerfile
    image: kassech-backend  # Use the kassech-backend image
    container_name: kassech-backend-container
    environment:
      DB_HOST: db                # PostgreSQL container service name
      DB_PORT: 5432
      DB_USER: root
      DB_PASSWORD: onepieceonepiece
      DB_NAME: kassech
      DB_SSLMODE: disable
      DB_TIMEZONE: Asia/Shanghai
      GIN_MODE: debug
      JWTToken: thteswetsersogbsiisissdteswetsersogbsifasofboteswetsersogbsijaflafoteswetsersogbsia
      ACCESS_TOKEN_EXPIRATION: 720h
      REFRESH_TOKEN_EXPIRATION: 720h
      PORT: 5000
      Proxies: 192.168.1.1,192.168.1.1
    ports:
      - "5000:5000"  # Expose the backend port
    networks:
      - pg_network
    depends_on:
      - db  # Wait for db to start before kassech-backend
      - redis  # Wait for redis to start before kassech-backend
      - rabbitmq  # Wait for redis to start before kassech-backend
    volumes:
      - ./Backend:/app  # Mount the Backend directory to the container
  kassech-frontend:
    build:
      context: ./Frontend/
      dockerfile: Dockerfile
    image: kassech-frontend  # Use the kassech-frontend image
    container_name: kassech-frontend-container
    environment:
      - CHOKIDAR_USEPOLLING=true
    ports:
      - "5173:5173"  # Expose the frontend port
    networks:
      - pg_network
    depends_on:
      - kassech-backend  # Wait for kassech-backend to start before kassech-frontend
    volumes:
      - ./Frontend:/app  # Mount the frontend source code to the container for live reload
      - /app/node_modules
networks:
  pg_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
